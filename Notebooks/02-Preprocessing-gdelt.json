{"paragraphs":[{"text":"%md\n## Préparation des donnees GDELT via Spark\nDans ce notebook nous allons préparer les données GDELT via Spark puis les transférer dans des collections MongoDB","user":"anonymous","dateUpdated":"2020-01-23T01:00:33+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Préparation des donnees GDELT via Spark</h2>\n<p>Dans ce notebook nous allons préparer les données GDELT via Spark puis les transférer dans des collections MongoDB</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1579741233268_-1850891062","id":"20181212-102323_67420128","dateCreated":"2020-01-23T01:00:33+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3223"},{"text":"%md\n# Load GDELT Databases","user":"anonymous","dateUpdated":"2020-01-23T01:00:33+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Load GDELT Databases</h1>\n</div>"}]},"apps":[],"jobName":"paragraph_1579741233284_-956157768","id":"20200122-225527_352819947","dateCreated":"2020-01-23T01:00:33+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3224"},{"text":"import org.apache.spark.sql.functions._\n\nimport scala.collection.mutable.ArrayBuffer\n\nimport com.mongodb.spark._\nimport com.mongodb.spark.config._\n\nimport com.amazonaws.services.s3.AmazonS3Client\nimport com.amazonaws.auth.BasicAWSCredentials\n\nimport org.apache.spark.input.PortableDataStream\nimport java.util.zip.ZipInputStream\nimport java.io.BufferedReader\nimport java.io.InputStreamReader\n    \nval AWS_ID = \"AKIAS4U3P2UU5U4JOWXX\"\nval AWS_KEY = \"KIsg3ZwFTBsw36IgOK/+UqNtOK8pTVS/cMrId/yH\"\n// la classe AmazonS3Client n'est pas serializable\n// on rajoute l'annotation @transient pour dire a Spark de ne pas essayer de serialiser cette classe et l'envoyer aux executeurs\n@transient val awsClient = new AmazonS3Client(new BasicAWSCredentials(AWS_ID, AWS_KEY))\n\nsc.hadoopConfiguration.set(\"fs.s3a.access.key\", AWS_ID) // mettre votre ID du fichier credentials.csv\nsc.hadoopConfiguration.set(\"fs.s3a.secret.key\", AWS_KEY) // mettre votre secret du fichier credentials.csv","user":"anonymous","dateUpdated":"2020-01-23T23:51:32+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"warning: there was one deprecation warning; re-run with -deprecation for details\nimport org.apache.spark.sql.functions._\nimport scala.collection.mutable.ArrayBuffer\nimport com.mongodb.spark._\nimport com.mongodb.spark.config._\nimport com.amazonaws.services.s3.AmazonS3Client\nimport com.amazonaws.auth.BasicAWSCredentials\nimport org.apache.spark.input.PortableDataStream\nimport java.util.zip.ZipInputStream\nimport java.io.BufferedReader\nimport java.io.InputStreamReader\nAWS_ID: String = AKIAS4U3P2UU5U4JOWXX\nAWS_KEY: String = KIsg3ZwFTBsw36IgOK/+UqNtOK8pTVS/cMrId/yH\nawsClient: com.amazonaws.services.s3.AmazonS3Client = com.amazonaws.services.s3.AmazonS3Client@171ac2c6\n"}]},"apps":[],"jobName":"paragraph_1579741233284_-44348882","id":"20200117-113234_348261115","dateCreated":"2020-01-23T01:00:33+0000","dateStarted":"2020-01-23T23:51:32+0000","dateFinished":"2020-01-23T23:51:32+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3225"},{"text":"val gkgRDD = sc.binaryFiles(\"s3://fpsx-telecom-gdelt2019/201912[0-9]*.gkg.csv.zip\").\n  flatMap { // decompresser les fichiers\n    case (name: String, content: PortableDataStream) =>\n      val zis = new ZipInputStream(content.open)\n      Stream.continually(zis.getNextEntry).\n        takeWhile{ case null => zis.close(); false\n        case _ => true }.\n        flatMap { _ =>\n          val br = new BufferedReader(new InputStreamReader(zis))\n          Stream.continually(br.readLine()).takeWhile(_ != null)\n        }\n  }\n\n\nval exportRDD = sc.binaryFiles(\"s3://fpsx-telecom-gdelt2019/2019[0-9]*.export.CSV.zip\").\n    flatMap { // decompresser les fichiers\n        case (name: String, content: PortableDataStream) =>\n          val zis = new ZipInputStream(content.open)\n          Stream.continually(zis.getNextEntry).\n            takeWhile{ case null => zis.close(); false\n            case _ => true }.\n            flatMap { _ =>\n              val br = new BufferedReader(new InputStreamReader(zis))\n              Stream.continually(br.readLine()).takeWhile(_ != null)\n            }\n      }\n\nval mentionsRDD = sc.binaryFiles(\"s3://fpsx-telecom-gdelt2019/2019[0-9]*.mentions.CSV.zip\").\n    flatMap { // decompresser les fichiers\n        case (name: String, content: PortableDataStream) =>\n          val zis = new ZipInputStream(content.open)\n          Stream.continually(zis.getNextEntry).\n            takeWhile{ case null => zis.close(); false\n            case _ => true }.\n            flatMap { _ =>\n              val br = new BufferedReader(new InputStreamReader(zis))\n              Stream.continually(br.readLine()).takeWhile(_ != null)\n            }\n      }\n      \nval gkgTransRDD = sc.binaryFiles(\"s3://fpsx-telecom-gdelt2019/201912[0-9]*.translation.gkg.csv.zip\").\n  flatMap { // decompresser les fichiers\n    case (name: String, content: PortableDataStream) =>\n      val zis = new ZipInputStream(content.open)\n      Stream.continually(zis.getNextEntry).\n        takeWhile{ case null => zis.close(); false\n        case _ => true }.\n        flatMap { _ =>\n          val br = new BufferedReader(new InputStreamReader(zis))\n          Stream.continually(br.readLine()).takeWhile(_ != null)\n        }\n  }\n\n\nval exportTransRDD = sc.binaryFiles(\"s3://fpsx-telecom-gdelt2019/2019[0-9]*.translation.export.CSV.zip\").\n    flatMap { // decompresser les fichiers\n        case (name: String, content: PortableDataStream) =>\n          val zis = new ZipInputStream(content.open)\n          Stream.continually(zis.getNextEntry).\n            takeWhile{ case null => zis.close(); false\n            case _ => true }.\n            flatMap { _ =>\n              val br = new BufferedReader(new InputStreamReader(zis))\n              Stream.continually(br.readLine()).takeWhile(_ != null)\n            }\n      }\n\nval mentionsTransRDD = sc.binaryFiles(\"s3://fpsx-telecom-gdelt2019/2019[0-9]*.mentions.CSV.zip\").\n    flatMap { // decompresser les fichiers\n        case (name: String, content: PortableDataStream) =>\n          val zis = new ZipInputStream(content.open)\n          Stream.continually(zis.getNextEntry).\n            takeWhile{ case null => zis.close(); false\n            case _ => true }.\n            flatMap { _ =>\n              val br = new BufferedReader(new InputStreamReader(zis))\n              Stream.continually(br.readLine()).takeWhile(_ != null)\n            }\n      }","user":"anonymous","dateUpdated":"2020-01-23T23:51:43+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"gkgRDD: org.apache.spark.rdd.RDD[String] = MapPartitionsRDD[108] at flatMap at <console>:85\nexportRDD: org.apache.spark.rdd.RDD[String] = MapPartitionsRDD[110] at flatMap at <console>:99\nmentionsRDD: org.apache.spark.rdd.RDD[String] = MapPartitionsRDD[112] at flatMap at <console>:112\ngkgTransRDD: org.apache.spark.rdd.RDD[String] = MapPartitionsRDD[114] at flatMap at <console>:125\nexportTransRDD: org.apache.spark.rdd.RDD[String] = MapPartitionsRDD[116] at flatMap at <console>:139\nmentionsTransRDD: org.apache.spark.rdd.RDD[String] = MapPartitionsRDD[118] at flatMap at <console>:152\n"}]},"apps":[],"jobName":"paragraph_1579741233284_1781529507","id":"20171217-232457_1732696781","dateCreated":"2020-01-23T01:00:33+0000","dateStarted":"2020-01-23T23:51:43+0000","dateFinished":"2020-01-23T23:51:45+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3226"},{"text":"%md \n# Preprocessing","user":"anonymous","dateUpdated":"2020-01-23T08:30:13+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Preprocessing</h1>\n</div>"}]},"apps":[],"jobName":"paragraph_1579768206400_-995901039","id":"20200123-083006_2069045364","dateCreated":"2020-01-23T08:30:06+0000","dateStarted":"2020-01-23T08:30:13+0000","dateFinished":"2020-01-23T08:30:13+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3227"},{"text":"%md\n## Query 1","user":"anonymous","dateUpdated":"2020-01-23T08:30:42+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Query 1</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1579766648327_-1257245348","id":"20200123-080408_1641377242","dateCreated":"2020-01-23T08:04:08+0000","dateStarted":"2020-01-23T08:30:18+0000","dateFinished":"2020-01-23T08:30:18+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3228"},{"text":"def getLanguage(code: String)={\n    var c = code\n    if (c.isEmpty()) {\n        c = \"eng\"\n    } else {\n      c = c.split(\";\")(0).takeRight(3)  \n    }\n    c\n}\n\nval eventsDF = exportRDD.map(_.split(\"\\t\")).map(e=> (e(0), e(1), e(33), e(53))).toDF(\"GLOBALEVENTID\", \"SQLDATE\", \"NumArticles\", \"ActionGeo_CountryCode\")\nval mentionsDF = mentionsRDD.map(_.split(\"\\t\", -1)).filter(_.length == 16).map(r=>(r(0), getLanguage(r(14)))).toDF(\"GLOBALEVENTID\", \"MentionDocTranslationInfo\")\n\nval dfQ1 = eventsDF.join(mentionsDF, Seq(\"GLOBALEVENTID\"), \"left\").distinct()\n.withColumnRenamed(\"SQLDATE\",\"jour\")\n.withColumnRenamed(\"ActionGeo_CountryCode\",\"pays\")\n.withColumnRenamed(\"MentionDocTranslationInfo\",\"langue\")\n.groupBy(\"jour\", \"pays\", \"langue\")\n.agg(sum(\"NumArticles\") as \"numArticles\",\n    count(\"GLOBALEVENTID\") as \"numEvent\"\n)\n.drop(\"GLOBALEVENTID\")\n\nval eventsTransDF = exportTransRDD.map(_.split(\"\\t\")).map(e=> (e(0), e(1), e(33), e(53))).toDF(\"GLOBALEVENTID\", \"SQLDATE\", \"NumArticles\", \"ActionGeo_CountryCode\")\nval mentionsTransDF = mentionsTransRDD.map(_.split(\"\\t\", -1)).filter(_.length == 16).map(r=>(r(0), getLanguage(r(14)))).toDF(\"GLOBALEVENTID\", \"MentionDocTranslationInfo\")\n\nval dfQ1Trans = eventsTransDF.join(mentionsTransDF, Seq(\"GLOBALEVENTID\"), \"left\").distinct()\n.withColumnRenamed(\"SQLDATE\",\"jour\")\n.withColumnRenamed(\"ActionGeo_CountryCode\",\"pays\")\n.withColumnRenamed(\"MentionDocTranslationInfo\",\"langue\")\n.groupBy(\"jour\", \"pays\", \"langue\")\n.agg(sum(\"NumArticles\") as \"numArticles\",\n    count(\"GLOBALEVENTID\") as \"numEvent\"\n)\n.drop(\"GLOBALEVENTID\")\n\n\n val dfQ1_union = dfQ1.union(dfQ1Trans)","user":"anonymous","dateUpdated":"2020-01-24T00:12:09+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"getLanguage: (code: String)String\neventsDF: org.apache.spark.sql.DataFrame = [GLOBALEVENTID: string, SQLDATE: string ... 2 more fields]\nmentionsDF: org.apache.spark.sql.DataFrame = [GLOBALEVENTID: string, MentionDocTranslationInfo: string]\ndfQ1: org.apache.spark.sql.DataFrame = [jour: string, pays: string ... 3 more fields]\neventsTransDF: org.apache.spark.sql.DataFrame = [GLOBALEVENTID: string, SQLDATE: string ... 2 more fields]\nmentionsTransDF: org.apache.spark.sql.DataFrame = [GLOBALEVENTID: string, MentionDocTranslationInfo: string]\ndfQ1Trans: org.apache.spark.sql.DataFrame = [jour: string, pays: string ... 3 more fields]\ndfQ1_union: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [jour: string, pays: string ... 3 more fields]\n"}]},"apps":[],"jobName":"paragraph_1579766691257_819349093","id":"20200123-080451_186075731","dateCreated":"2020-01-23T08:04:51+0000","dateStarted":"2020-01-24T00:11:55+0000","dateFinished":"2020-01-24T00:11:56+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3229"},{"text":"dfQ1.show(5)","user":"anonymous","dateUpdated":"2020-01-24T00:12:01+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------+----+------+-----------+--------+\n|    jour|pays|langue|numArticles|numEvent|\n+--------+----+------+-----------+--------+\n|20180110|  US|   eng|      160.0|      24|\n|20190124|  NL|   eng|      239.0|      53|\n|20190131|  BR|   eng|      203.0|      49|\n|20190202|  GL|   eng|       16.0|       3|\n|20190205|    |   eng|     6910.0|     576|\n+--------+----+------+-----------+--------+\nonly showing top 5 rows\n\n"}]},"apps":[],"jobName":"paragraph_1579824718494_-920915665","id":"20200124-001158_100327929","dateCreated":"2020-01-24T00:11:58+0000","dateStarted":"2020-01-24T00:12:01+0000","dateFinished":"2020-01-24T00:19:50+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3230"},{"text":"%md\n## Query 2","user":"anonymous","dateUpdated":"2020-01-23T08:30:42+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Query 2</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1579766652527_-1899975152","id":"20200123-080412_1765644372","dateCreated":"2020-01-23T08:04:12+0000","dateStarted":"2020-01-23T08:30:21+0000","dateFinished":"2020-01-23T08:30:21+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3231"},{"text":"val q2_mentions = mentionsRDD.map(x => x.split(\"\\t\")).map(e => (e(0), e(5))).toDF(\"GLOBALEVENTID\", \"MentionIdentifier\").groupBy(\"GLOBALEVENTID\").count\n\nval q2Trans_mentions = mentionsTransRDD.map(x => x.split(\"\\t\")).map(e => (e(0), e(5))).toDF(\"GLOBALEVENTID\", \"MentionIdentifier\").groupBy(\"GLOBALEVENTID\").count\n\nval q2 = exportRDD.map(x => x.split(\"\\t\")).map(e => (e(0), e(1),  e(53)))\n    .toDF(\"GLOBALEVENTID\", \"SQLDATE\", \"ActionGeo_CountryCode\")\n    .join(q2_mentions, \"GLOBALEVENTID\")\n    .withColumn(\"Year\", substring($\"SQLDATE\",0,4))\n    .withColumn(\"Month\", substring($\"SQLDATE\",5,2))\n    .withColumn(\"Day\", substring($\"SQLDATE\",7,2))\n    .withColumnRenamed(\"count\", \"numMentions\")\n    .drop(\"SQLDATE\")\n\nval q2Trans = exportTransRDD.map(x => x.split(\"\\t\")).map(e => (e(0), e(1),  e(53)))\n    .toDF(\"GLOBALEVENTID\", \"SQLDATE\", \"ActionGeo_CountryCode\")\n    .join(q2_mentions, \"GLOBALEVENTID\")\n    .withColumn(\"Year\", substring($\"SQLDATE\",0,4))\n    .withColumn(\"Month\", substring($\"SQLDATE\",5,2))\n    .withColumn(\"Day\", substring($\"SQLDATE\",7,2))\n    .withColumnRenamed(\"count\", \"numMentions\")\n    .drop(\"SQLDATE\")\n\nval q2_union = q2.union(q2Trans)","user":"anonymous","dateUpdated":"2020-01-24T00:00:01+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"q2_mentions: org.apache.spark.sql.DataFrame = [GLOBALEVENTID: string, count: bigint]\nq2Trans_mentions: org.apache.spark.sql.DataFrame = [GLOBALEVENTID: string, count: bigint]\nq2: org.apache.spark.sql.DataFrame = [GLOBALEVENTID: string, ActionGeo_CountryCode: string ... 4 more fields]\nq2Trans: org.apache.spark.sql.DataFrame = [GLOBALEVENTID: string, ActionGeo_CountryCode: string ... 4 more fields]\nq2_union: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [GLOBALEVENTID: string, ActionGeo_CountryCode: string ... 4 more fields]\n"}]},"apps":[],"jobName":"paragraph_1579823862625_1510555285","id":"20200123-235742_1078717210","dateCreated":"2020-01-23T23:57:42+0000","dateStarted":"2020-01-23T23:59:43+0000","dateFinished":"2020-01-23T23:59:44+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3232"},{"text":"q2_union.show(5)","user":"anonymous","dateUpdated":"2020-01-24T00:00:01+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------------+---------------------+-----------+----+-----+---+\n|GLOBALEVENTID|ActionGeo_CountryCode|numMentions|Year|Month|Day|\n+-------------+---------------------+-----------+----+-----+---+\n|    813429089|                   RS|          1|2019|   01| 01|\n|    813429391|                   CU|          1|2019|   01| 01|\n|    813429591|                   NI|          1|2019|   01| 01|\n|    813429696|                   US|          1|2019|   01| 01|\n|    813429998|                   PK|          1|2019|   01| 01|\n+-------------+---------------------+-----------+----+-----+---+\nonly showing top 5 rows\n\n"}]},"apps":[],"jobName":"paragraph_1579768134945_539449881","id":"20200123-082854_1926009393","dateCreated":"2020-01-23T08:28:54+0000","dateStarted":"2020-01-23T23:59:50+0000","dateFinished":"2020-01-24T00:08:48+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3233"},{"text":"%md\n## Query 3","user":"anonymous","dateUpdated":"2020-01-23T08:30:42+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Query 3</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1579741233284_-814793331","id":"20200122-225235_1981745834","dateCreated":"2020-01-23T01:00:33+0000","dateStarted":"2020-01-23T08:30:27+0000","dateFinished":"2020-01-23T08:30:27+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3234"},{"text":"val gkgDF_q3 = gkgRDD.toDF.withColumn(\"GLOBALEVENTID\", split($\"value\", \"\\\\t\").getItem(0))\n  .withColumn(\"GKGRECORDID\", split($\"value\", \"\\\\t\").getItem(0))\n  .withColumn(\"DATE\", split($\"value\", \"\\\\t\").getItem(1))\n  .withColumn(\"SourceCommonName\", split($\"value\", \"\\\\t\").getItem(3))\n  .withColumn(\"Themes\", split($\"value\", \"\\\\t\").getItem(7))\n  .withColumn(\"Locations\", split($\"value\", \"\\\\t\").getItem(9))\n  .withColumn(\"Persons\", split($\"value\", \"\\\\t\").getItem(11))\n  .withColumn(\"Tone\", split($\"value\", \"\\\\t\").getItem(15))\n  .drop(\"value\")\n\nval gkgTransDF_q3 = gkgTransRDD.toDF.withColumn(\"GLOBALEVENTID\", split($\"value\", \"\\\\t\").getItem(0))\n  .withColumn(\"GKGRECORDID\", split($\"value\", \"\\\\t\").getItem(0))\n  .withColumn(\"DATE\", split($\"value\", \"\\\\t\").getItem(1))\n  .withColumn(\"SourceCommonName\", split($\"value\", \"\\\\t\").getItem(3))\n  .withColumn(\"Themes\", split($\"value\", \"\\\\t\").getItem(7))\n  .withColumn(\"Locations\", split($\"value\", \"\\\\t\").getItem(9))\n  .withColumn(\"Persons\", split($\"value\", \"\\\\t\").getItem(11))\n  .withColumn(\"Tone\", split($\"value\", \"\\\\t\").getItem(15))\n  .drop(\"value\")\n \n val gkg_union_q3 = gkgDF_q3.union(gkgTransDF_q3)","user":"anonymous","dateUpdated":"2020-01-24T01:24:57+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"gkgDF_q3: org.apache.spark.sql.DataFrame = [GLOBALEVENTID: string, GKGRECORDID: string ... 6 more fields]\ngkgTransDF_q3: org.apache.spark.sql.DataFrame = [GLOBALEVENTID: string, GKGRECORDID: string ... 6 more fields]\ngkg_union_q3: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [GLOBALEVENTID: string, GKGRECORDID: string ... 6 more fields]\n"}]},"apps":[],"jobName":"paragraph_1579815559233_691603603","id":"20200123-213919_1215653098","dateCreated":"2020-01-23T21:39:19+0000","dateStarted":"2020-01-24T01:24:57+0000","dateFinished":"2020-01-24T01:24:58+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3235"},{"text":"def clean_loc(location:String) : ArrayBuffer[String] = {\n    val countries = ArrayBuffer[String]()\n    if (location !=null){\n        val loc = location.split(\";\") \n        if ((loc != null) && (loc.length != 0)) {\n            for (text <- loc) {\n                val arr = text.replaceAll(\"\\\\s\", \"\").split(\"#\", -1)\n                if (arr != null){\n                    if ((arr(0) == \"1\") || (arr(0) == \"2\")|| (arr(0) == \"3\")|| (arr(0) == \"4\")|| (arr(0) == \"5\")) {\n                        countries += arr(2)\n                    }\n                    else {\n                        Unit\n                    }\n                }\n            }\n        }\n    }\n\n    if ((countries != null)  && (countries != 0)) {\n        return countries.distinct\n    }\n    else {\n        countries += \"Unknown\"\n        return countries.distinct\n    }\n}\n\nval udf_loc = udf(clean_loc _)","user":"anonymous","dateUpdated":"2020-01-24T01:25:00+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"clean_loc: (location: String)scala.collection.mutable.ArrayBuffer[String]\nudf_loc: org.apache.spark.sql.expressions.UserDefinedFunction = UserDefinedFunction(<function1>,ArrayType(StringType,true),Some(List(StringType)))\n"}]},"apps":[],"jobName":"paragraph_1579772162303_1506797091","id":"20200123-093602_2098676973","dateCreated":"2020-01-23T09:36:02+0000","dateStarted":"2020-01-24T01:25:00+0000","dateFinished":"2020-01-24T01:25:00+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3236"},{"text":"val gkgDF_q3_cleaned = gkg_union_q3\n    .withColumn(\"SourceCommonName\",trim($\"SourceCommonName\"))\n    .withColumn(\"Countries\", udf_loc($\"Locations\"))\n    .withColumn(\"Tone\", split($\"Tone\",\",\")(0).cast(\"Double\"))\n    .withColumn(\"Themes\", split($\"Themes\", \"\\\\;\"))\n    .withColumn(\"Persons\", split($\"Persons\", \"\\\\;\"))\n    .withColumn(\"Year\", substring($\"DATE\",0,4))\n    .withColumn(\"Month\", substring($\"DATE\",5,2))\n    .withColumn(\"Day\", substring($\"DATE\",7,2))\n    .drop(\"DATE\",\"Locations\")","user":"anonymous","dateUpdated":"2020-01-24T01:25:02+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"gkgDF_q3_cleaned: org.apache.spark.sql.DataFrame = [GLOBALEVENTID: string, GKGRECORDID: string ... 8 more fields]\n"}]},"apps":[],"jobName":"paragraph_1579741233285_-360865000","id":"20200117-145150_1235311770","dateCreated":"2020-01-23T01:00:33+0000","dateStarted":"2020-01-24T01:25:02+0000","dateFinished":"2020-01-24T01:25:03+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3237"},{"text":"gkgDF_q3_cleaned.show(5)","user":"anonymous","dateUpdated":"2020-01-23T23:53:19+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+----------------+----------------+--------------------+--------------------+--------------------+-----------------+----------------+----+-----+---+\n|   GLOBALEVENTID|     GKGRECORDID|    SourceCommonName|              Themes|             Persons|             Tone|       Countries|Year|Month|Day|\n+----------------+----------------+--------------------+--------------------+--------------------+-----------------+----------------+----+-----+---+\n|20191201000000-0|20191201000000-0|         carbuzz.com|[TAX_WORLDLANGUAG...|                  []|0.792393026941363|            [SA]|2019|   12| 01|\n|20191201000000-1|20191201000000-1|  y102montgomery.com|[MANMADE_DISASTER...|        [riley rugg]|-2.24719101123596|              []|2019|   12| 01|\n|20191201000000-2|20191201000000-2|   rhyljournal.co.uk|[MARITIME_INCIDEN...|[priti patel, jer...|-10.6227106227106|              []|2019|   12| 01|\n|20191201000000-3|20191201000000-3|kiowacountysignal...|[EDUCATION, IMPEA...|[stephen miller, ...| -1.0752688172043|[MX, US, CA, UP]|2019|   12| 01|\n|20191201000000-4|20191201000000-4|   wvgazettemail.com|[TAX_FNCACT, TAX_...|[martin luther ki...|-5.51601423487544|            [US]|2019|   12| 01|\n+----------------+----------------+--------------------+--------------------+--------------------+-----------------+----------------+----+-----+---+\nonly showing top 5 rows\n\n"}]},"apps":[],"jobName":"paragraph_1579741233285_-2028310719","id":"20200117-112628_323012166","dateCreated":"2020-01-23T01:00:33+0000","dateStarted":"2020-01-23T23:53:19+0000","dateFinished":"2020-01-23T23:53:20+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3238"},{"text":"%md\n## Query 4","user":"anonymous","dateUpdated":"2020-01-23T08:30:42+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Query 4</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1579766632486_1433426795","id":"20200123-080352_339728741","dateCreated":"2020-01-23T08:03:52+0000","dateStarted":"2020-01-23T08:30:31+0000","dateFinished":"2020-01-23T08:30:31+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3239"},{"text":"val eventsDF_q4 = exportRDD.map(_.split(\"\\t\")).map(e=> (e(1), e(7), e(17), e(33), e(34), e(37), e(40), e(41), e(45), e(48), e(49))).toDF( \"SQLDATE\", \"Actor1CountryCode\", \n    \"Actor2CountryCode\", \"NumArticles\",\"AvgTone\",\n    \"Actor1Geo_CountryCode\", \"Actor1Geo_Lat\", \"Actor1Geo_Long\", \"Actor2Geo_CountryCode\", \"Actor2Geo_Lat\", \"Actor2Geo_Long\"                                                                                                    \n)\n\nval eventsTransDF_q4 = exportTransRDD.map(_.split(\"\\t\")).map(e=> (e(1), e(7), e(17), e(33), e(34), e(37), e(40), e(41), e(45), e(48), e(49))).toDF( \"SQLDATE\", \"Actor1CountryCode\", \n    \"Actor2CountryCode\", \"NumArticles\",\"AvgTone\",\n    \"Actor1Geo_CountryCode\", \"Actor1Geo_Lat\", \"Actor1Geo_Long\", \"Actor2Geo_CountryCode\", \"Actor2Geo_Lat\", \"Actor2Geo_Long\"                                                                                                    \n)","user":"anonymous","dateUpdated":"2020-01-24T06:44:34+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"eventsDF_q4: org.apache.spark.sql.DataFrame = [SQLDATE: string, Actor1CountryCode: string ... 9 more fields]\neventsTransDF_q4: org.apache.spark.sql.DataFrame = [SQLDATE: string, Actor1CountryCode: string ... 9 more fields]\n"}]},"apps":[],"jobName":"paragraph_1579766762202_-979767470","id":"20200123-080602_1805501933","dateCreated":"2020-01-23T08:06:02+0000","dateStarted":"2020-01-24T06:44:34+0000","dateFinished":"2020-01-24T06:44:34+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3240"},{"text":"val country1Df_q4 =  eventsDF_q4.filter(!$\"Actor1Geo_CountryCode\".equalTo(\"\"))\nval country2Df_q4 = country1Df_q4.filter(!$\"Actor2Geo_CountryCode\".equalTo(\"\"))\n\nval country1TransDf_q4 =  eventsTransDF_q4.filter(!$\"Actor1Geo_CountryCode\".equalTo(\"\"))\nval country2TransDf_q4 = country1TransDf_q4.filter(!$\"Actor2Geo_CountryCode\".equalTo(\"\"))","user":"anonymous","dateUpdated":"2020-01-24T06:44:37+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"country1Df_q4: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [SQLDATE: string, Actor1CountryCode: string ... 9 more fields]\ncountry2Df_q4: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [SQLDATE: string, Actor1CountryCode: string ... 9 more fields]\ncountry1TransDf_q4: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [SQLDATE: string, Actor1CountryCode: string ... 9 more fields]\ncountry2TransDf_q4: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [SQLDATE: string, Actor1CountryCode: string ... 9 more fields]\n"}]},"apps":[],"jobName":"paragraph_1579766860305_-1247448207","id":"20200123-080740_941166559","dateCreated":"2020-01-23T08:07:40+0000","dateStarted":"2020-01-24T06:44:37+0000","dateFinished":"2020-01-24T06:44:37+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3241"},{"text":"val countryDf_q4 = \n  country2Df_q4\n  .withColumn(\"NumArticles\", $\"NumArticles\".cast(\"Int\"))\n  .withColumn(\"AvgTone\", $\"AvgTone\".cast(\"Double\"))\n\nval countryTransDf_q4 = \n  country2TransDf_q4\n  .withColumn(\"NumArticles\", $\"NumArticles\".cast(\"Int\"))\n  .withColumn(\"AvgTone\", $\"AvgTone\".cast(\"Double\"))\n  ","user":"anonymous","dateUpdated":"2020-01-24T06:44:39+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"countryDf_q4: org.apache.spark.sql.DataFrame = [SQLDATE: string, Actor1CountryCode: string ... 9 more fields]\ncountryTransDf_q4: org.apache.spark.sql.DataFrame = [SQLDATE: string, Actor1CountryCode: string ... 9 more fields]\n"}]},"apps":[],"jobName":"paragraph_1579767446932_461918837","id":"20200123-081726_895230286","dateCreated":"2020-01-23T08:17:26+0000","dateStarted":"2020-01-24T06:44:39+0000","dateFinished":"2020-01-24T06:44:39+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3242"},{"text":"val countryDf_q4 = country2Df_q4.withColumn(\"NumArticles\", $\"NumArticles\".cast(\"Int\")).withColumn(\"AvgTone\", $\"AvgTone\".cast(\"Double\"))\n\nval countryTransDf_q4 = country2TransDf_q4.withColumn(\"NumArticles\", $\"NumArticles\".cast(\"Int\")).withColumn(\"AvgTone\", $\"AvgTone\".cast(\"Double\"))","user":"anonymous","dateUpdated":"2020-01-24T06:44:41+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"countryDf_q4: org.apache.spark.sql.DataFrame = [SQLDATE: string, Actor1CountryCode: string ... 9 more fields]\ncountryTransDf_q4: org.apache.spark.sql.DataFrame = [SQLDATE: string, Actor1CountryCode: string ... 9 more fields]\n"}]},"apps":[],"jobName":"paragraph_1579767482612_-235933943","id":"20200123-081802_161528049","dateCreated":"2020-01-23T08:18:02+0000","dateStarted":"2020-01-24T06:44:41+0000","dateFinished":"2020-01-24T06:44:41+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3243"},{"text":"val aggDf_q4 = countryDf_q4.\n  groupBy(\"SQLDATE\", \"Actor1Geo_CountryCode\", \"Actor2Geo_CountryCode\").\n  agg(sum(\"NumArticles\") as \"sum_NumArticles\", \n      avg(\"AvgTone\") as \"avg_AvgTone\", \n      min(\"Actor1Geo_Lat\") as \"min_Actor1Geo_lat\", \n      max(\"Actor1Geo_Lat\") as \"max_Actor1Geo_Lat\", \n      min(\"Actor1Geo_Long\") as \"min_Actor1Geo_Long\", \n      max(\"Actor1Geo_Long\") as \"max_Actor1Geo_Long\",\n      min(\"Actor2Geo_Lat\") as \"min_Actor2Geo_lat\", \n      max(\"Actor2Geo_Lat\") as \"max_Actor2Geo_Lat\", \n      min(\"Actor2Geo_Long\") as \"min_Actor2Geo_Long\", \n      max(\"Actor2Geo_Long\") as \"max_Actor2Geo_Long\"\n     )\n\nval aggTransDf_q4 = countryTransDf_q4.\n  groupBy(\"SQLDATE\", \"Actor1Geo_CountryCode\", \"Actor2Geo_CountryCode\").\n  agg(sum(\"NumArticles\") as \"sum_NumArticles\", \n      avg(\"AvgTone\") as \"avg_AvgTone\", \n      min(\"Actor1Geo_Lat\") as \"min_Actor1Geo_lat\", \n      max(\"Actor1Geo_Lat\") as \"max_Actor1Geo_Lat\", \n      min(\"Actor1Geo_Long\") as \"min_Actor1Geo_Long\", \n      max(\"Actor1Geo_Long\") as \"max_Actor1Geo_Long\",\n      min(\"Actor2Geo_Lat\") as \"min_Actor2Geo_lat\", \n      max(\"Actor2Geo_Lat\") as \"max_Actor2Geo_Lat\", \n      min(\"Actor2Geo_Long\") as \"min_Actor2Geo_Long\", \n      max(\"Actor2Geo_Long\") as \"max_Actor2Geo_Long\"\n     )","user":"anonymous","dateUpdated":"2020-01-24T06:44:43+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"aggDf_q4: org.apache.spark.sql.DataFrame = [SQLDATE: string, Actor1Geo_CountryCode: string ... 11 more fields]\naggTransDf_q4: org.apache.spark.sql.DataFrame = [SQLDATE: string, Actor1Geo_CountryCode: string ... 11 more fields]\n"}]},"apps":[],"jobName":"paragraph_1579767533350_-571195031","id":"20200123-081853_587050519","dateCreated":"2020-01-23T08:18:53+0000","dateStarted":"2020-01-24T06:44:43+0000","dateFinished":"2020-01-24T06:44:43+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3244"},{"text":"val aggDfDate_q4 = aggDf_q4.withColumn(\"Year\", $\"SQLDATE\".substr(0, 4))\n  .withColumn(\"Month\", $\"SQLDATE\".substr(5, 2))\n  .withColumn(\"Day\", $\"SQLDATE\".substr(7, 2))\n  .withColumn(\"min_Actor1Geo_Long\", $\"min_Actor1Geo_Long\".cast(\"Double\"))\n  .withColumn(\"min_Actor1Geo_lat\", $\"min_Actor1Geo_lat\".cast(\"Double\"))\n  .withColumn(\"min_Actor2Geo_Long\", $\"min_Actor2Geo_Long\".cast(\"Double\"))\n  .withColumn(\"min_Actor2Geo_lat\", $\"min_Actor2Geo_lat\".cast(\"Double\"))\n  .withColumn(\"max_Actor1Geo_Lat\", $\"max_Actor1Geo_Lat\".cast(\"Double\"))\n  .withColumn(\"max_Actor1Geo_Long\", $\"max_Actor1Geo_Long\".cast(\"Double\"))\n  .withColumn(\"max_Actor2Geo_Lat\", $\"max_Actor2Geo_Lat\".cast(\"Double\"))\n  .withColumn(\"max_Actor2Geo_Long\", $\"max_Actor2Geo_Long\".cast(\"Double\"))\n\nval aggTransDfDate_q4 = aggTransDf_q4.withColumn(\"Year\", $\"SQLDATE\".substr(0, 4))\n  .withColumn(\"Month\", $\"SQLDATE\".substr(5, 2))\n  .withColumn(\"Day\", $\"SQLDATE\".substr(7, 2))\n  .withColumn(\"min_Actor1Geo_Long\", $\"min_Actor1Geo_Long\".cast(\"Double\"))\n  .withColumn(\"min_Actor1Geo_lat\", $\"min_Actor1Geo_lat\".cast(\"Double\"))\n  .withColumn(\"min_Actor2Geo_Long\", $\"min_Actor2Geo_Long\".cast(\"Double\"))\n  .withColumn(\"min_Actor2Geo_lat\", $\"min_Actor2Geo_lat\".cast(\"Double\"))\n  .withColumn(\"max_Actor1Geo_Lat\", $\"max_Actor1Geo_Lat\".cast(\"Double\"))\n  .withColumn(\"max_Actor1Geo_Long\", $\"max_Actor1Geo_Long\".cast(\"Double\"))\n  .withColumn(\"max_Actor2Geo_Lat\", $\"max_Actor2Geo_Lat\".cast(\"Double\"))\n  .withColumn(\"max_Actor2Geo_Long\", $\"max_Actor2Geo_Long\".cast(\"Double\"))\n","user":"anonymous","dateUpdated":"2020-01-24T06:44:45+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"aggDfDate_q4: org.apache.spark.sql.DataFrame = [SQLDATE: string, Actor1Geo_CountryCode: string ... 14 more fields]\naggTransDfDate_q4: org.apache.spark.sql.DataFrame = [SQLDATE: string, Actor1Geo_CountryCode: string ... 14 more fields]\n"}]},"apps":[],"jobName":"paragraph_1579766762004_1062906","id":"20200123-080602_1792917414","dateCreated":"2020-01-23T08:06:02+0000","dateStarted":"2020-01-24T06:44:45+0000","dateFinished":"2020-01-24T06:44:46+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3245"},{"text":" val aggDfDate_q4_union = aggDfDate_q4.union(aggTransDfDate_q4)\n //aggDfDate_q4_union.show(5)","user":"anonymous","dateUpdated":"2020-01-24T06:44:49+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"aggDfDate_q4_union: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [SQLDATE: string, Actor1Geo_CountryCode: string ... 14 more fields]\n"}]},"apps":[],"jobName":"paragraph_1579825286906_1715790232","id":"20200124-002126_388155051","dateCreated":"2020-01-24T00:21:26+0000","dateStarted":"2020-01-24T06:44:49+0000","dateFinished":"2020-01-24T06:44:49+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3246"},{"text":"%md \n\n# Write to MongoDB","user":"anonymous","dateUpdated":"2020-01-23T01:00:33+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Write to MongoDB</h1>\n</div>"}]},"apps":[],"jobName":"paragraph_1579741233285_-440464543","id":"20200122-225414_1760322409","dateCreated":"2020-01-23T01:00:33+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3247"},{"text":"/**\n  * write spark DataFrame into the database gdelt on mongodb\n  *\n  * @param df              spark DataFrame to be saved\n  * @param collection_name collection name in db gdelt\n  */\ndef writeIntoMongodb(df: org.apache.spark.sql.DataFrame, collection_name: String) = {\n  MongoSpark.save(df.write.option(\"spark.mongodb.output.uri\", s\"mongodb://gdeltuser:gdeltpass@172.31.24.60:27017,172.31.28.231:27017,172.31.25.118:27017/gdelt.$collection_name?replicaSet=rsGdelt\").mode(\"overwrite\"))\n}\n\n\n/**\n  * read spark DataFrame from the database gdelt on Mongodb\n  *\n  * @param collection_name collection name in db gdelt\n  * @return org.apache.spark.sql.DataFrame\n  */\ndef readFromMongodb(collection_name: String): org.apache.spark.sql.DataFrame = {\n  val df = sc.loadFromMongoDB(ReadConfig(Map(\"uri\" -> s\"mongodb://gdeltuser:gdeltpass@172.31.24.60:27017,172.31.28.231:27017,172.31.25.118:27017/gdelt?replicaSet=rsGdelt\", \"collection\"->collection_name, \"readPreference.name\" -> \"secondaryPreferred\"))).toDF()\n  df\n}","user":"anonymous","dateUpdated":"2020-01-24T00:29:37+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"writeIntoMongodb: (df: org.apache.spark.sql.DataFrame, collection_name: String)Unit\nreadFromMongodb: (collection_name: String)org.apache.spark.sql.DataFrame\n"}]},"apps":[],"jobName":"paragraph_1579769958060_-867519351","id":"20200123-085918_309586895","dateCreated":"2020-01-23T08:59:18+0000","dateStarted":"2020-01-24T00:29:37+0000","dateFinished":"2020-01-24T00:29:37+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3248"},{"text":"%md\n## Query 1","user":"anonymous","dateUpdated":"2020-01-23T08:29:42+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Query 1</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1579768173539_-1931655860","id":"20200123-082933_1014895994","dateCreated":"2020-01-23T08:29:33+0000","dateStarted":"2020-01-23T08:29:41+0000","dateFinished":"2020-01-23T08:29:41+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3249"},{"text":"writeIntoMongodb(dfQ1, \"query1\")","user":"anonymous","dateUpdated":"2020-01-24T00:29:40+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1579787523597_-1155977977","id":"20200123-135203_1643139366","dateCreated":"2020-01-23T13:52:03+0000","dateStarted":"2020-01-24T00:29:40+0000","dateFinished":"2020-01-24T00:37:56+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3250"},{"text":"var tmpDfQ1 = readFromMongodb(\"query1\")\ntmpDfQ1.show(5)","user":"anonymous","dateUpdated":"2020-01-23T19:25:45+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------------------+--------+------+-----------+--------+----+\n|                 _id|    jour|langue|numArticles|numEvent|pays|\n+--------------------+--------+------+-----------+--------+----+\n|[5e29f3f4b1b0761e...|20191227|   eng|     3056.0|     583|  MY|\n|[5e29f3f4b1b0761e...|20181205|   eng|      190.0|      36|  JA|\n|[5e29f3f4b1b0761e...|20181210|   eng|      251.0|      43|  CH|\n|[5e29f3f4b1b0761e...|20191122|   eng|       25.0|       4|  SA|\n|[5e29f3f4b1b0761e...|20181223|   eng|        2.0|       2|  SN|\n+--------------------+--------+------+-----------+--------+----+\nonly showing top 5 rows\n\ntmpDfQ1: org.apache.spark.sql.DataFrame = [_id: struct<oid: string>, jour: string ... 4 more fields]\n"}]},"apps":[],"jobName":"paragraph_1579790091889_-1639289165","id":"20200123-143451_1453713495","dateCreated":"2020-01-23T14:34:51+0000","dateStarted":"2020-01-23T19:25:58+0000","dateFinished":"2020-01-23T19:28:55+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3251"},{"text":"%md\n## Query 2","user":"anonymous","dateUpdated":"2020-01-23T08:29:45+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Query 2</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1579768183058_1071084357","id":"20200123-082943_788749277","dateCreated":"2020-01-23T08:29:43+0000","dateStarted":"2020-01-23T08:29:45+0000","dateFinished":"2020-01-23T08:29:45+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3252"},{"text":"writeIntoMongodb(q2, \"query2\")\n","user":"anonymous","dateUpdated":"2020-01-24T00:56:17+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1579769994055_-1809905187","id":"20200123-085954_191389610","dateCreated":"2020-01-23T08:59:54+0000","dateStarted":"2020-01-24T00:56:17+0000","dateFinished":"2020-01-24T01:04:39+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3253"},{"text":"%md\n## Query 3","user":"anonymous","dateUpdated":"2020-01-23T08:29:32+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Query 3</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1579768155381_-242372346","id":"20200123-082915_893383995","dateCreated":"2020-01-23T08:29:15+0000","dateStarted":"2020-01-23T08:29:32+0000","dateFinished":"2020-01-23T08:29:32+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3254"},{"text":"writeIntoMongodb(gkgDF_q3_cleaned, \"query3\")","user":"anonymous","dateUpdated":"2020-01-24T01:25:07+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1579741233286_507477929","id":"20200118-172655_2069013167","dateCreated":"2020-01-23T01:00:33+0000","dateStarted":"2020-01-24T01:25:07+0000","dateFinished":"2020-01-24T02:56:58+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3255"},{"text":"%md\n\n## Query 4","user":"anonymous","dateUpdated":"2020-01-23T08:29:38+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Query 4</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1579767901778_1855932420","id":"20200123-082501_598371997","dateCreated":"2020-01-23T08:25:01+0000","dateStarted":"2020-01-23T08:29:28+0000","dateFinished":"2020-01-23T08:29:28+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3256"},{"text":"%md\n**Don't update the mongodb table for my query !!! stp**","user":"anonymous","dateUpdated":"2020-01-23T22:15:27+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p><strong>Don&rsquo;t update the mongodb table for my query !!! stp</strong></p>\n</div>"}]},"apps":[],"jobName":"paragraph_1579817431616_-2127035671","id":"20200123-221031_603198841","dateCreated":"2020-01-23T22:10:31+0000","dateStarted":"2020-01-23T22:15:27+0000","dateFinished":"2020-01-23T22:15:27+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3257"},{"text":"writeIntoMongodb(aggDfDate_q4_union, \"query4\")\n","user":"anonymous","dateUpdated":"2020-01-24T06:44:55+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1579767931015_-509967356","id":"20200123-082531_1244092747","dateCreated":"2020-01-23T08:25:31+0000","dateStarted":"2020-01-24T06:44:55+0000","dateFinished":"2020-01-24T06:35:40+0000","status":"RUNNING","progressUpdateIntervalMs":500,"$$hashKey":"object:3258","errorMessage":""},{"user":"anonymous","dateUpdated":"2020-01-23T01:00:33+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1579741233286_1800852135","id":"20200122-222021_1036461751","dateCreated":"2020-01-23T01:00:33+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3259"}],"name":"02-Preprocessing-gdelt","id":"2EXF1JKSS","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"python:shared_process":[],"sh:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}